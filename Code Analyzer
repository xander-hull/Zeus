"use client";

import { useState } from "react";
import { CodeReview } from "@/entities/CodeReview";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { 
  Code2, 
  AlertTriangle, 
  CheckCircle, 
  Info,
  Loader2,
  FileText,
  Bug,
  Lightbulb,
  Sparkles,
  Copy,
  Zap
} from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import useAppLevelAuth from "@/hooks/useAppLevelAuth";
import { InvokeLLM } from "@/integrations/Core";
import ZeusAnimation from "../components/ZeusAnimation";

const LightningBoltAnimation = () => (
  <svg
    className="lightning-bolt-throw"
    viewBox="0 0 32 32"
    xmlns="http://www.w3.org/2000/svg"
    fill="#FFD700"
    stroke="#F59E0B"
    strokeWidth="1"
  >
    <path d="M21.9,2.3c-0.2-0.3-0.5-0.4-0.8-0.4c-0.3,0-0.6,0.1-0.8,0.4l-9.8,13.3H4.8c-0.4,0-0.8,0.2-1,0.5c-0.2,0.3-0.2,0.7,0,1l10,14.5c0.2,0.3,0.5,0.4,0.8,0.4c0.3,0,0.6-0.1,0.8-0.4l9.8-13.3h6.5c0.4,0,0.8-0.2,1-0.5c0.2-0.3,0.2-0.7,0-1L21.9,2.3z" />
  </svg>
);

export default function CodeAnalyzer() {
  const { isLoggedIn } = useAppLevelAuth();
  const { toast } = useToast();
  const [formData, setFormData] = useState({
    title: "",
    code: ""
  });
  const [analyzing, setAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<any>(null);
  const [showZeusAnimation, setShowZeusAnimation] = useState(false);

  const handleAnalyze = async () => {
    if (!formData.title || !formData.code) {
      toast({
        title: "Missing fields",
        description: "Please provide a title and some code to analyze.",
        variant: "destructive"
      });
      return;
    }

    setAnalyzing(true);
    setAnalysisResult(null);

    try {
      const analysisPrompt = `
        You are an expert code analysis AI. Analyze this code with precision and provide a comprehensive review.

        Code to analyze:
        \`\`\`
        ${formData.code}
        \`\`\`

        Your analysis must include:
        1. LANGUAGE DETECTION: Identify the programming language.
        2. COMPREHENSIVE ERROR ANALYSIS: Find all errors, warnings, and potential issues.
        3. IMPROVEMENTS: Provide specific, actionable suggestions for optimization, best practices, security, and performance.
        4. QUALITY ASSESSMENT: Rate the code quality from 0-100.
        5. PERFECTED CODE: Generate the complete, flawless version of the code with all improvements applied.

        Be extremely thorough.

        For each error/issue, provide:
        - line number
        - description of the problem
        - severity level (error/warning/info)
        - category/type of issue

        For each suggestion, provide:
        - line number(s) affected
        - explanation of the improvement
        - the improved code snippet
        - reasoning for the change

        Return a comprehensive JSON response.
      `;

      const analysis = await InvokeLLM({
        prompt: analysisPrompt,
        response_json_schema: {
          type: "object",
          properties: {
            language: { type: "string" },
            errors: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  line: { type: "number" },
                  message: { type: "string" },
                  severity: { type: "string", enum: ["error", "warning", "info"] },
                  category: { type: "string" }
                }
              }
            },
            suggestions: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  line: { type: "number" },
                  description: { type: "string" },
                  improvedCode: { type: "string" },
                  reasoning: { type: "string" }
                }
              }
            },
            score: { type: "number" },
            linesAnalyzed: { type: "number" },
            fixedCode: { type: "string" },
            summary: { type: "string" }
          }
        }
      });

      await CodeReview.create({
        title: formData.title,
        code: formData.code,
        language: analysis.language || 'unknown',
        analysisResult: analysis,
        status: "completed"
      });

      // Start Zeus animation
      setShowZeusAnimation(true);

    } catch (error) {
      console.error('Error analyzing code:', error);
      toast({
        title: "Analysis Failed",
        description: "Zeus encountered an issue. Please try again.",
        variant: "destructive"
      });
      setAnalyzing(false);
    }
  };

  const handleZeusAnimationComplete = () => {
    setShowZeusAnimation(false);
    setAnalyzing(false);
    
    // This would contain the analysis result from the API call
    // For now, we'll set a placeholder - in real implementation, 
    // you'd store the analysis result and set it here
    toast({
      title: "Divine Analysis Complete!",
      description: "Zeus has blessed your code with divine wisdom!",
    });
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'error': return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case 'info': return <Info className="h-4 w-4 text-blue-500" />;
      default: return <Bug className="h-4 w-4 text-gray-500" />;
    }
  };

  const getSeverityBadgeVariant = (severity: string) => {
    switch (severity) {
      case 'error': return 'destructive';
      case 'warning': return 'secondary';
      default: return 'default';
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard!",
    });
  };

  if (!isLoggedIn) return null;

  return (
    <div className="space-y-6">
      {showZeusAnimation && <ZeusAnimation onComplete={handleZeusAnimationComplete} />}
      <div className="text-center">
        <div className="flex items-center justify-center gap-3 mb-4">
          <Zap className="h-10 w-10 lightning-icon text-yellow-500" />
          <h1 className="text-4xl font-bold zeus-gradient">Divine Code Analyzer</h1>
        </div>
        <p className="text-gray-700 text-lg">Let Zeus examine your code with divine precision</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 items-start">
        <div className="space-y-6">
          <Card className="zeus-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code2 className="h-5 w-5 text-yellow-600" />
                Submit Your Code
              </CardTitle>
              <CardDescription>Prepare your code for divine analysis</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">Title</Label>
                <Input
                  id="title"
                  placeholder="e.g., User Login Function"
                  value={formData.title}
                  onChange={(e) => setFormData({...formData, title: e.target.value})}
                  className="border-yellow-200 focus:border-yellow-400"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="code">Code</Label>
                <Textarea
                  id="code"
                  placeholder="Paste your code here for Zeus to analyze..."
                  value={formData.code}
                  onChange={(e) => setFormData({...formData, code: e.target.value})}
                  rows={15}
                  className="font-mono text-sm border-yellow-200 focus:border-yellow-400"
                />
              </div>

              <Button onClick={handleAnalyze} disabled={analyzing} className="zeus-button w-full py-3 text-lg">
                {analyzing ? (
                  <>
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" /> 
                    Zeus is analyzing...
                  </>
                ) : (
                  <>
                    <Zap className="mr-2 h-5 w-5 lightning-icon" /> 
                    Invoke Divine Analysis
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {analysisResult?.fixedCode && (
            <Card className="zeus-card">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5 text-green-500 floating-element" />
                    <span className="zeus-gradient">Divine Perfection</span>
                  </div>
                  <Button variant="ghost" size="sm" onClick={() => handleCopy(analysisResult.fixedCode)} className="hover:bg-yellow-50">
                    <Copy className="h-4 w-4 mr-2" />
                    Copy
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                 <pre className="bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-md text-sm overflow-x-auto max-h-[400px] border border-green-200">
                    <code>{analysisResult.fixedCode}</code>
                  </pre>
              </CardContent>
            </Card>
          )}
        </div>

        <Card className="zeus-card sticky top-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5 text-purple-600" />
              <span className="zeus-gradient">Divine Insights</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="max-h-[calc(100vh-10rem)] overflow-y-auto">
            {!analysisResult && !analyzing && (
              <div className="text-center py-12 text-gray-600">
                <Code2 className="h-16 w-16 mx-auto mb-4 floating-element text-yellow-400" />
                <p className="text-lg">Zeus awaits your code...</p>
                <p className="text-sm mt-2">Submit your code above to receive divine analysis</p>
              </div>
            )}

            {analyzing && (
              <div className="text-center py-12 text-gray-600">
                <Zap className="h-16 w-16 mx-auto mb-4 lightning-icon text-yellow-500" />
                <p className="text-lg font-semibold zeus-gradient">Zeus is analyzing your code...</p>
                <p className="text-sm mt-2">Divine wisdom is being channeled</p>
              </div>
            )}

            {analysisResult && (
              <div className="space-y-6">
                <Card className="bg-gradient-to-r from-yellow-50 to-purple-50 border-yellow-200">
                  <CardContent className="p-6 text-center">
                    <p className="text-sm text-gray-600 mb-2">Divine Quality Score</p>
                    <p className="text-5xl font-bold zeus-gradient mb-3">{analysisResult.score}%</p>
                    <div className="flex items-center justify-center gap-4">
                      <Badge className="bg-gradient-to-r from-yellow-100 to-purple-100 text-gray-800 border-yellow-300">
                        {analysisResult.language}
                      </Badge>
                      <Badge variant="secondary" className="bg-gray-100">
                        {analysisResult.linesAnalyzed} lines
                      </Badge>
                    </div>
                  </CardContent>
                </Card>

                {analysisResult.summary && (
                  <Card className="zeus-card">
                    <CardHeader>
                      <CardTitle className="text-lg zeus-gradient">Divine Summary</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-gray-700">{analysisResult.summary}</p>
                    </CardContent>
                  </Card>
                )}

                {analysisResult.errors?.length > 0 && (
                  <div>
                    <h3 className="font-semibold mb-3 flex items-center gap-2 text-lg">
                      <Bug className="h-6 w-6 text-red-500" /> 
                      <span className="text-red-600">Issues Detected ({analysisResult.errors.length})</span>
                    </h3>
                    <div className="space-y-3">
                      {analysisResult.errors.map((error: any, index: number) => (
                        <Card key={index} className="border-red-200 hover:border-red-300 transition-colors">
                          <CardContent className="p-4">
                            <div className="flex items-start gap-3">
                              {getSeverityIcon(error.severity)}
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-2">
                                  <Badge variant="outline" className="text-xs">Line {error.line}</Badge>
                                  <Badge variant={getSeverityBadgeVariant(error.severity)} className="capitalize text-xs">
                                    {error.severity}
                                  </Badge>
                                </div>
                                <p className="text-sm text-gray-700">{error.message}</p>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}

                {analysisResult.suggestions?.length > 0 && (
                  <div>
                    <h3 className="font-semibold mb-3 flex items-center gap-2 text-lg">
                      <Lightbulb className="h-6 w-6 text-yellow-500 floating-element" /> 
                      <span className="zeus-gradient">Divine Improvements ({analysisResult.suggestions.length})</span>
                    </h3>
                    <div className="space-y-3">
                      {analysisResult.suggestions.map((suggestion: any, index: number) => (
                        <Card key={index} className="border-yellow-200 hover:border-yellow-300 transition-colors">
                          <CardHeader className="p-4">
                            <CardDescription>
                              <Badge variant="outline" className="mb-2 text-xs bg-yellow-50">
                                Line {suggestion.line || 'Multiple'}
                              </Badge>
                              <p className="text-sm text-gray-700 font-medium">{suggestion.description}</p>
                            </CardDescription>
                          </CardHeader>
                          {suggestion.improvedCode && (
                            <CardContent className="p-4 pt-0">
                              <pre className="bg-gradient-to-r from-yellow-50 to-purple-50 p-3 rounded-md text-xs overflow-x-auto border border-yellow-200">
                                <code>{suggestion.improvedCode}</code>
                              </pre>
                            </CardContent>
                          )}
                        </Card>
                      ))}
                    </div>
                  </div>
                )}

                {analysisResult.errors?.length === 0 && analysisResult.suggestions?.length === 0 && (
                  <div className="text-center py-8">
                    <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4 floating-element" />
                    <h3 className="font-semibold text-xl zeus-gradient mb-2">Divine Perfection Achieved!</h3>
                    <p className="text-gray-600">Zeus finds no flaws in your code. Well done, mortal!</p>
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
