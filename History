"use client";

import { useState, useEffect } from "react";
import { CodeReview } from "@/entities/CodeReview";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { 
  History as HistoryIcon, 
  Search, 
  Filter,
  Code2,
  AlertTriangle,
  CheckCircle,
  Clock,
  Trash2,
  Eye,
  Copy
} from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import useAppLevelAuth from "@/hooks/useAppLevelAuth";
import { format } from "date-fns";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

export default function History() {
  const { isLoggedIn } = useAppLevelAuth();
  const { toast } = useToast();
  const [reviews, setReviews] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedLanguage, setSelectedLanguage] = useState("all");
  const [selectedStatus, setSelectedStatus] = useState("all");

  useEffect(() => {
    if (!isLoggedIn) return;
    loadReviews();
  }, [isLoggedIn]);

  const loadReviews = async () => {
    try {
      setLoading(true);
      const data = await CodeReview.list("createdAt:desc", 100);
      setReviews(data);
    } catch (error) {
      console.error('Error loading reviews:', error);
      toast({
        title: "Error",
        description: "Failed to load code reviews",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    try {
      await CodeReview.delete(id);
      setReviews(reviews.filter(review => review.id !== id));
      toast({
        title: "Success",
        description: "Code review deleted successfully"
      });
    } catch (error) {
      console.error('Error deleting review:', error);
      toast({
        title: "Error",
        description: "Failed to delete code review",
        variant: "destructive"
      });
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard!",
    });
  };

  const filteredReviews = reviews.filter(review => {
    const matchesSearch = review.title.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesLanguage = selectedLanguage === "all" || review.language === selectedLanguage;
    const matchesStatus = selectedStatus === "all" || review.status === selectedStatus;
    return matchesSearch && matchesLanguage && matchesStatus;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getLanguageColor = (language: string) => {
    const colors: { [key: string]: string } = {
      javascript: 'bg-yellow-100 text-yellow-800',
      python: 'bg-blue-100 text-blue-800',
      java: 'bg-orange-100 text-orange-800',
      cpp: 'bg-purple-100 text-purple-800',
      html: 'bg-red-100 text-red-800',
      css: 'bg-blue-100 text-blue-800',
      typescript: 'bg-blue-100 text-blue-800'
    };
    return colors[language] || 'bg-gray-100 text-gray-800';
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'pending': return <Clock className="h-4 w-4 text-yellow-500" />;
      case 'failed': return <AlertTriangle className="h-4 w-4 text-red-500" />;
      default: return <Clock className="h-4 w-4 text-gray-500" />;
    }
  };

  if (!isLoggedIn) return null;

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="space-y-3">
          <div className="h-8 bg-slate-200 rounded w-64 animate-pulse"></div>
          <div className="h-4 bg-slate-100 rounded w-96 animate-pulse"></div>
        </div>
        <div className="space-y-4">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="h-24 bg-slate-100 rounded-lg animate-pulse"></div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div className="flex items-center gap-3 mb-6">
        <HistoryIcon className="h-6 w-6 text-purple-600" />
        <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">Code Review History</h1>
      </div>

      {/* Filters */}
      <Card className="bg-white/95 border border-purple-200/50 shadow-lg">
        <CardContent className="p-6">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-purple-400 h-4 w-4" />
              <Input
                placeholder="Search reviews..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 border-purple-200 focus:border-purple-400 focus:ring-purple-400"
              />
            </div>
            <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
              <SelectTrigger className="w-full md:w-48 border-purple-200 focus:border-purple-400 focus:ring-purple-400">
                <SelectValue placeholder="All Languages" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Languages</SelectItem>
                <SelectItem value="javascript">JavaScript</SelectItem>
                <SelectItem value="python">Python</SelectItem>
                <SelectItem value="java">Java</SelectItem>
                <SelectItem value="cpp">C++</SelectItem>
                <SelectItem value="html">HTML</SelectItem>
                <SelectItem value="css">CSS</SelectItem>
                <SelectItem value="typescript">TypeScript</SelectItem>
              </SelectContent>
            </Select>
            <Select value={selectedStatus} onValueChange={setSelectedStatus}>
              <SelectTrigger className="w-full md:w-48 border-purple-200 focus:border-purple-400 focus:ring-purple-400">
                <SelectValue placeholder="All Statuses" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="pending">Pending</SelectItem>
                <SelectItem value="failed">Failed</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Reviews List */}
      <Card className="bg-white/95 border border-purple-200/50 shadow-lg">
        <CardHeader className="bg-gradient-to-r from-purple-50/50 to-pink-50/50 rounded-t-lg">
          <CardTitle className="flex items-center gap-2">
            <Code2 className="h-5 w-5 text-purple-600" />
            Reviews ({filteredReviews.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          {filteredReviews.length === 0 ? (
            <div className="text-center py-12">
              <HistoryIcon className="h-12 w-12 text-purple-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-purple-800 mb-2">No reviews found</h3>
              <p className="text-purple-600">Try adjusting your search criteria</p>
            </div>
          ) : (
            <div className="space-y-4">
              {filteredReviews.map((review) => (
                <div key={review.id} className="flex items-center justify-between p-4 rounded-xl border border-purple-100 hover:border-purple-300 hover:bg-gradient-to-r hover:from-purple-50/50 hover:to-pink-50/50 transition-all duration-200 hover:shadow-md">
                  <div className="flex items-center gap-4 flex-1 min-w-0">
                    <div className="p-2 rounded-lg bg-gradient-to-r from-purple-100 to-pink-100">
                      {getStatusIcon(review.status)}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className="font-semibold text-purple-800 truncate">{review.title}</h4>
                      <div className="flex items-center gap-2 mt-1">
                        <Badge className={`text-xs ${getLanguageColor(review.language)}`}>
                          {review.language}
                        </Badge>
                        <Badge className={`text-xs ${getStatusColor(review.status)}`}>
                          {review.status}
                        </Badge>
                        <span className="text-xs text-purple-500">
                          {format(new Date(review.createdAt), "MMM d, yyyy 'at' h:mm a")}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    {review.analysisResult?.score && (
                      <div className="text-right mr-4">
                        <div className="text-lg font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
                          {review.analysisResult.score}%
                        </div>
                        {review.analysisResult?.errors && (
                          <div className="text-xs text-red-600">
                            {review.analysisResult.errors.length} errors
                          </div>
                        )}
                      </div>
                    )}
                    
                    {/* View Details Dialog */}
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant="ghost" size="sm" className="text-purple-600 hover:text-purple-800 hover:bg-purple-100">
                          <Eye className="h-4 w-4" />
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto bg-white/95">
                        <DialogHeader>
                          <DialogTitle className="text-purple-800">{review.title}</DialogTitle>
                        </DialogHeader>
                        <div className="space-y-6">
                          <div className="flex items-center gap-2">
                            <Badge className={getLanguageColor(review.language)}>
                              {review.language}
                            </Badge>
                            <Badge className={getStatusColor(review.status)}>
                              {review.status}
                            </Badge>
                          </div>
                          
                          <div>
                            <h4 className="font-semibold mb-2 text-purple-800">Original Code:</h4>
                            <pre className="bg-purple-50/50 p-4 rounded-lg text-sm overflow-x-auto border border-purple-200">
                              <code>{review.code}</code>
                            </pre>
                          </div>

                          {review.analysisResult && (
                            <div className="space-y-6">
                              <div className="text-center p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200">
                                <div className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
                                  {review.analysisResult.score}%
                                </div>
                                <p className="text-purple-600">Quality Score</p>
                              </div>

                              {review.analysisResult.fixedCode && (
                                <div>
                                  <div className="flex items-center justify-between mb-2">
                                    <h4 className="font-semibold text-purple-800">Corrected Code:</h4>
                                    <Button variant="ghost" size="sm" onClick={() => handleCopy(review.analysisResult.fixedCode)}>
                                      <Copy className="h-4 w-4 mr-2" />
                                      Copy
                                    </Button>
                                  </div>
                                  <pre className="bg-green-50/50 p-4 rounded-lg text-sm overflow-x-auto border border-green-200">
                                    <code>{review.analysisResult.fixedCode}</code>
                                  </pre>
                                </div>
                              )}

                              {review.analysisResult.errors?.length > 0 && (
                                <div>
                                  <h4 className="font-semibold mb-2 text-purple-800">Issues Found:</h4>
                                  <div className="space-y-2">
                                    {review.analysisResult.errors.map((error: any, index: number) => (
                                      <div key={index} className="p-3 bg-red-50 border border-red-200 rounded-lg">
                                        <div className="flex items-center gap-2 mb-1">
                                          <Badge variant="outline" className="text-xs">
                                            Line {error.line}
                                          </Badge>
                                          <Badge variant="outline" className="text-xs capitalize">
                                            {error.severity}
                                          </Badge>
                                        </div>
                                        <p className="text-sm">{error.message}</p>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}

                              {review.analysisResult.suggestions?.length > 0 && (
                                <div>
                                  <h4 className="font-semibold mb-2 text-purple-800">Suggestions:</h4>
                                  <div className="space-y-2">
                                    {review.analysisResult.suggestions.map((suggestion: any, index: number) => (
                                      <div key={index} className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                                        {suggestion.line && (
                                          <Badge variant="outline" className="text-xs mb-2">
                                            Line {suggestion.line}
                                          </Badge>
                                        )}
                                        <p className="text-sm mb-2">{suggestion.description || suggestion}</p>
                                        {suggestion.improvedCode && (
                                          <pre className="bg-white p-2 rounded text-xs overflow-x-auto border">
                                            <code>{suggestion.improvedCode}</code>
                                          </pre>
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      </DialogContent>
                    </Dialog>

                    {/* Delete Button */}
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="ghost" size="sm" className="text-red-600 hover:text-red-700 hover:bg-red-50">
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent className="bg-white/95">
                        <AlertDialogHeader>
                          <AlertDialogTitle className="text-purple-800">Delete Code Review</AlertDialogTitle>
                          <AlertDialogDescription className="text-purple-600">
                            Are you sure you want to delete this code review? This action cannot be undone.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel className="border-purple-200 text-purple-600 hover:bg-purple-50">Cancel</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => handleDelete(review.id)}
                            className="bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600"
                          >
                            Delete
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
