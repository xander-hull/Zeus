"use client";

import { useState, useEffect } from "react";
import { CodeReview } from "@/entities/CodeReview";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Zap, 
  Code2, 
  AlertTriangle, 
  CheckCircle, 
  Clock,
  TrendingUp,
  FileText,
  Plus
} from "lucide-react";
import Link from "next/link";
import { createPageUrl } from "@/utils";
import useAppLevelAuth from "@/hooks/useAppLevelAuth";
import { format } from "date-fns";

export default function Dashboard() {
  const { isLoggedIn } = useAppLevelAuth();
  const [recentReviews, setRecentReviews] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({
    totalReviews: 0,
    errorsFound: 0,
    averageScore: 0,
    completedToday: 0
  });

  useEffect(() => {
    if (!isLoggedIn) return;
    loadDashboardData();
  }, [isLoggedIn]);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      const reviews = await CodeReview.list("createdAt:desc", 5);
      setRecentReviews(reviews);

      // Calculate stats
      const allReviews = await CodeReview.list("createdAt:desc", 100);
      const totalReviews = allReviews.length;
      const errorsFound = allReviews.reduce((sum, review) => {
        return sum + (review.analysisResult?.errors?.length || 0);
      }, 0);
      const averageScore = allReviews.length > 0 
        ? allReviews.reduce((sum, review) => sum + (review.analysisResult?.score || 0), 0) / allReviews.length
        : 0;
      
      const today = new Date().toDateString();
      const completedToday = allReviews.filter(review => 
        new Date(review.createdAt).toDateString() === today && review.status === 'completed'
      ).length;

      setStats({
        totalReviews,
        errorsFound,
        averageScore: Math.round(averageScore),
        completedToday
      });
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getLanguageColor = (language: string) => {
    const colors: { [key: string]: string } = {
      javascript: 'bg-yellow-100 text-yellow-800',
      python: 'bg-blue-100 text-blue-800',
      java: 'bg-orange-100 text-orange-800',
      cpp: 'bg-purple-100 text-purple-800',
      html: 'bg-red-100 text-red-800',
      css: 'bg-blue-100 text-blue-800',
      typescript: 'bg-blue-100 text-blue-800'
    };
    return colors[language] || 'bg-gray-100 text-gray-800';
  };

  if (!isLoggedIn) return null;

  if (loading) {
    return (
      <div className="space-y-8">
        <div className="space-y-3">
          <div className="h-8 bg-white/20 rounded w-64 animate-pulse"></div>
          <div className="h-4 bg-white/10 rounded w-96 animate-pulse"></div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="h-32 bg-white/20 rounded-lg animate-pulse"></div>
          ))}
        </div>
        <div className="h-80 bg-white/20 rounded-lg animate-pulse"></div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6">
        <div className="flex-1">
          <div className="flex items-center gap-3 mb-3">
            <Zap className="h-8 w-8 lightning-icon text-yellow-500" />
            <h1 className="text-4xl font-bold zeus-gradient">Divine Code Analysis</h1>
          </div>
          <p className="text-gray-700 text-lg">Harness the power of Zeus to perfect your code</p>
        </div>
        <Link href={createPageUrl('CodeAnalyzer')}>
          <Button className="zeus-button gap-2 px-6 py-3 text-lg shadow-xl">
            <Plus className="h-5 w-5" />
            New Analysis
          </Button>
        </Link>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="zeus-card floating-element">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-2">
              <p className="text-xs font-semibold text-gray-600 uppercase tracking-wider">Total Reviews</p>
              <div className="p-3 rounded-xl bg-gradient-to-r from-blue-400 to-purple-500 shadow-lg">
                <FileText className="h-6 w-6 text-white" />
              </div>
            </div>
            <p className="text-3xl font-bold zeus-gradient">{stats.totalReviews}</p>
          </CardContent>
        </Card>

        <Card className="zeus-card floating-element" style={{ animationDelay: '0.2s' }}>
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-2">
              <p className="text-xs font-semibold text-gray-600 uppercase tracking-wider">Errors Found</p>
              <div className="p-3 rounded-xl bg-gradient-to-r from-red-400 to-pink-500 shadow-lg">
                <AlertTriangle className="h-6 w-6 text-white" />
              </div>
            </div>
            <p className="text-3xl font-bold text-red-600">{stats.errorsFound}</p>
          </CardContent>
        </Card>

        <Card className="zeus-card floating-element" style={{ animationDelay: '0.4s' }}>
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-2">
              <p className="text-xs font-semibold text-gray-600 uppercase tracking-wider">Average Score</p>
              <div className="p-3 rounded-xl bg-gradient-to-r from-green-400 to-emerald-500 shadow-lg">
                <TrendingUp className="h-6 w-6 text-white" />
              </div>
            </div>
            <p className="text-3xl font-bold text-green-600">{stats.averageScore}%</p>
          </CardContent>
        </Card>

        <Card className="zeus-card floating-element" style={{ animationDelay: '0.6s' }}>
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-2">
              <p className="text-xs font-semibold text-gray-600 uppercase tracking-wider">Completed Today</p>
              <div className="p-3 rounded-xl bg-gradient-to-r from-indigo-400 to-blue-500 shadow-lg">
                <CheckCircle className="h-6 w-6 text-white" />
              </div>
            </div>
            <p className="text-3xl font-bold text-blue-600">{stats.completedToday}</p>
          </CardContent>
        </Card>
      </div>

      {/* Recent Reviews */}
      <Card className="zeus-card">
        <CardHeader className="bg-gradient-to-r from-yellow-50/80 to-purple-50/80 rounded-t-lg">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2 text-xl">
              <Clock className="h-6 w-6 text-yellow-600 lightning-icon" />
              <span className="zeus-gradient">Recent Divine Reviews</span>
            </CardTitle>
            <Link href={createPageUrl('History')}>
              <Button variant="outline" size="sm" className="border-yellow-300 text-yellow-700 hover:bg-yellow-50">
                View All
              </Button>
            </Link>
          </div>
        </CardHeader>
        <CardContent className="p-6">
          {recentReviews.length === 0 ? (
            <div className="text-center py-12">
              <Code2 className="h-16 w-16 text-yellow-400 mx-auto mb-4 floating-element" />
              <h3 className="text-xl font-semibold zeus-gradient mb-2">No divine reviews yet</h3>
              <p className="text-gray-600 mb-6">Let Zeus analyze your code and unleash its true potential</p>
              <Link href={createPageUrl('CodeAnalyzer')}>
                <Button className="zeus-button gap-2 px-6 py-3">
                  <Plus className="h-5 w-5" />
                  Begin Divine Analysis
                </Button>
              </Link>
            </div>
          ) : (
            <div className="space-y-4">
              {recentReviews.map((review, index) => (
                <div 
                  key={review.id} 
                  className="flex items-center justify-between p-4 rounded-xl border border-yellow-200 hover:border-yellow-400 hover:bg-gradient-to-r hover:from-yellow-50/50 hover:to-purple-50/50 transition-all duration-300 hover:shadow-lg hover:scale-[1.02]"
                  style={{ animationDelay: `${index * 0.1}s` }}
                >
                  <div className="flex items-center gap-4 flex-1 min-w-0">
                    <div className="p-3 rounded-xl bg-gradient-to-r from-yellow-400 to-purple-500 shadow-lg">
                      <Code2 className="h-6 w-6 text-white" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className="font-semibold text-gray-800 truncate text-lg">{review.title}</h4>
                      <div className="flex items-center gap-2 mt-1">
                        <Badge className={`text-xs ${getLanguageColor(review.language)}`}>
                          {review.language}
                        </Badge>
                        <Badge className={`text-xs ${getStatusColor(review.status)}`}>
                          {review.status}
                        </Badge>
                        <span className="text-sm text-gray-500">
                          {format(new Date(review.createdAt), "MMM d, yyyy")}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    {review.analysisResult?.score && (
                      <div className="text-2xl font-bold zeus-gradient">
                        {review.analysisResult.score}%
                      </div>
                    )}
                    {review.analysisResult?.errors && (
                      <div className="text-sm text-red-600">
                        {review.analysisResult.errors.length} issues
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
